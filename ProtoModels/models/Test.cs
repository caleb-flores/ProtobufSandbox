// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: schemas/test.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public static partial class Test {

  #region Descriptor
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static Test() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChJzY2hlbWFzL3Rlc3QucHJvdG8iYQoIUmVxdWVzdFgSDQoFcXVlcnkYASAB", 
          "KAkSEwoLcGFnZV9udW1iZXIYAiABKAUSFwoPcmVzdWx0X3Blcl9wYWdlGAMg", 
          "ASgFEhgKEHJlc3VsdF9wZXJfcGFnZTIYBCABKAViBnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedCodeInfo(null, new pbr::GeneratedCodeInfo[] {
          new pbr::GeneratedCodeInfo(typeof(global::RequestX), new[]{ "Query", "PageNumber", "ResultPerPage", "ResultPerPage2" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class RequestX : pb::IMessage<RequestX> {
  private static readonly pb::MessageParser<RequestX> _parser = new pb::MessageParser<RequestX>(() => new RequestX());
  public static pb::MessageParser<RequestX> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::Test.Descriptor.MessageTypes[0]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public RequestX() {
    OnConstruction();
  }

  partial void OnConstruction();

  public RequestX(RequestX other) : this() {
    query_ = other.query_;
    pageNumber_ = other.pageNumber_;
    resultPerPage_ = other.resultPerPage_;
    resultPerPage2_ = other.resultPerPage2_;
  }

  public RequestX Clone() {
    return new RequestX(this);
  }

  public const int QueryFieldNumber = 1;
  private string query_ = "";
  public string Query {
    get { return query_; }
    set {
      query_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  public const int PageNumberFieldNumber = 2;
  private int pageNumber_;
  public int PageNumber {
    get { return pageNumber_; }
    set {
      pageNumber_ = value;
    }
  }

  public const int ResultPerPageFieldNumber = 3;
  private int resultPerPage_;
  public int ResultPerPage {
    get { return resultPerPage_; }
    set {
      resultPerPage_ = value;
    }
  }

  public const int ResultPerPage2FieldNumber = 4;
  private int resultPerPage2_;
  public int ResultPerPage2 {
    get { return resultPerPage2_; }
    set {
      resultPerPage2_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as RequestX);
  }

  public bool Equals(RequestX other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Query != other.Query) return false;
    if (PageNumber != other.PageNumber) return false;
    if (ResultPerPage != other.ResultPerPage) return false;
    if (ResultPerPage2 != other.ResultPerPage2) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Query.Length != 0) hash ^= Query.GetHashCode();
    if (PageNumber != 0) hash ^= PageNumber.GetHashCode();
    if (ResultPerPage != 0) hash ^= ResultPerPage.GetHashCode();
    if (ResultPerPage2 != 0) hash ^= ResultPerPage2.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.Default.Format(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Query.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Query);
    }
    if (PageNumber != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(PageNumber);
    }
    if (ResultPerPage != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(ResultPerPage);
    }
    if (ResultPerPage2 != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(ResultPerPage2);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Query.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Query);
    }
    if (PageNumber != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageNumber);
    }
    if (ResultPerPage != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResultPerPage);
    }
    if (ResultPerPage2 != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResultPerPage2);
    }
    return size;
  }

  public void MergeFrom(RequestX other) {
    if (other == null) {
      return;
    }
    if (other.Query.Length != 0) {
      Query = other.Query;
    }
    if (other.PageNumber != 0) {
      PageNumber = other.PageNumber;
    }
    if (other.ResultPerPage != 0) {
      ResultPerPage = other.ResultPerPage;
    }
    if (other.ResultPerPage2 != 0) {
      ResultPerPage2 = other.ResultPerPage2;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Query = input.ReadString();
          break;
        }
        case 16: {
          PageNumber = input.ReadInt32();
          break;
        }
        case 24: {
          ResultPerPage = input.ReadInt32();
          break;
        }
        case 32: {
          ResultPerPage2 = input.ReadInt32();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
